{"ast":null,"code":"'use strict';\n\nvar isWin = process.platform === 'win32';\n\nfunction notFoundError(original, syscall) {\n  return Object.assign(new Error(\"\".concat(syscall, \" \").concat(original.command, \" ENOENT\")), {\n    code: 'ENOENT',\n    errno: 'ENOENT',\n    syscall: \"\".concat(syscall, \" \").concat(original.command),\n    path: original.command,\n    spawnargs: original.args\n  });\n}\n\nfunction hookChildProcess(cp, parsed) {\n  if (!isWin) {\n    return;\n  }\n\n  var originalEmit = cp.emit;\n\n  cp.emit = function (name, arg1) {\n    // If emitting \"exit\" event and exit code is 1, we need to check if\n    // the command exists and emit an \"error\" instead\n    // See https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    if (name === 'exit') {\n      var err = verifyENOENT(arg1, parsed, 'spawn');\n\n      if (err) {\n        return originalEmit.call(cp, 'error', err);\n      }\n    }\n\n    return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params\n  };\n}\n\nfunction verifyENOENT(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawn');\n  }\n\n  return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawnSync');\n  }\n\n  return null;\n}\n\nmodule.exports = {\n  hookChildProcess: hookChildProcess,\n  verifyENOENT: verifyENOENT,\n  verifyENOENTSync: verifyENOENTSync,\n  notFoundError: notFoundError\n};","map":null,"metadata":{},"sourceType":"script"}