{"ast":null,"code":"var fs = require('fs');\n\nvar core;\n\nif (process.platform === 'win32' || global.TESTING_WINDOWS) {\n  core = require('./windows.js');\n} else {\n  core = require('./mode.js');\n}\n\nmodule.exports = isexe;\nisexe.sync = sync;\n\nfunction isexe(path, options, cb) {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  if (!cb) {\n    if (typeof Promise !== 'function') {\n      throw new TypeError('callback not provided');\n    }\n\n    return new Promise(function (resolve, reject) {\n      isexe(path, options || {}, function (er, is) {\n        if (er) {\n          reject(er);\n        } else {\n          resolve(is);\n        }\n      });\n    });\n  }\n\n  core(path, options || {}, function (er, is) {\n    // ignore EACCES because that just means we aren't allowed to run it\n    if (er) {\n      if (er.code === 'EACCES' || options && options.ignoreErrors) {\n        er = null;\n        is = false;\n      }\n    }\n\n    cb(er, is);\n  });\n}\n\nfunction sync(path, options) {\n  // my kingdom for a filtered catch\n  try {\n    return core.sync(path, options || {});\n  } catch (er) {\n    if (options && options.ignoreErrors || er.code === 'EACCES') {\n      return false;\n    } else {\n      throw er;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}