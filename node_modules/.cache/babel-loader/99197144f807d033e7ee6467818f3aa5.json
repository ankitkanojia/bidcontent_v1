{"ast":null,"code":"'use strict';\n\nvar deselectCurrent = require('toggle-selection');\n\nvar defaultMessage = 'Copy to clipboard: #{key}, Enter';\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? 'âŒ˜' : 'Ctrl') + '+C';\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction stripHtml(html) {\n  var tmp = document.createElement(\"DIV\");\n  tmp.innerHTML = html;\n  return tmp.textContent || tmp.innerText || \"\";\n}\n\nfunction createMarkElForText(text) {\n  var mark;\n  mark = document.createElement('span');\n  mark.textContent = text; // reset user styles for span element\n\n  mark.style.all = 'unset'; // prevents scrolling to the end of the page\n\n  mark.style.position = 'fixed';\n  mark.style.top = 0;\n  mark.style.clip = 'rect(0, 0, 0, 0)'; // used to preserve spaces and line breaks\n\n  mark.style.whiteSpace = 'pre'; // do not inherit user-select (it may be `none`)\n\n  mark.style.webkitUserSelect = 'text';\n  mark.style.MozUserSelect = 'text';\n  mark.style.msUserSelect = 'text';\n  mark.style.userSelect = 'text';\n  return mark;\n}\n\nfunction createMarkElForHtml(html) {\n  var mark;\n  mark = document.createElement('div');\n  mark.style.fontSize = '12pt'; // Prevent zooming on iOS\n  // Reset box model\n\n  mark.style.border = '0';\n  mark.style.padding = '0';\n  mark.style.margin = '0'; // Move element out of screen \n\n  mark.style.position = 'fixed';\n  mark.style['right'] = '-9999px';\n  mark.style.top = (window.pageYOffset || document.documentElement.scrollTop) + 'px'; // more hiding\n\n  mark.setAttribute('readonly', '');\n  mark.style.opacity = 0;\n  mark.style.pointerEvents = 'none';\n  mark.style.zIndex = -1;\n  mark.setAttribute('tabindex', '0'); // so it can be focused\n\n  mark.innerHTML = html;\n  return mark;\n}\n\nfunction copy(textOrHtml, options) {\n  var debug,\n      message,\n      reselectPrevious,\n      range,\n      selection,\n      mark,\n      success = false;\n\n  if (!options) {\n    options = {};\n  }\n\n  debug = options.debug || false;\n  options.onlyHtml = options.onlyHtml && options.asHtml;\n  options.canUsePrompt = options.canUsePrompt != undefined ? options.canUsePrompt : true;\n\n  try {\n    reselectPrevious = deselectCurrent();\n    range = document.createRange();\n    selection = document.getSelection();\n    var html, text;\n\n    if (options.asHtml) {\n      html = textOrHtml;\n      text = stripHtml(html);\n    } else {\n      text = textOrHtml;\n    }\n\n    mark = options.asHtml ? createMarkElForHtml(html) : createMarkElForText(text);\n    document.body.appendChild(mark); //range.setStartBefore(mark.firstChild);\n    //range.setEndAfter(mark.lastChild);\n\n    range.selectNode(mark);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    var successful = document.execCommand('copy');\n\n    if (!successful) {\n      throw new Error('copy command was unsuccessful');\n    }\n\n    success = true;\n  } catch (err) {\n    debug && console.error('unable to copy using execCommand: ', err);\n\n    if (!options.onlyHtml) {\n      debug && console.warn('trying IE specific stuff');\n\n      try {\n        //html is not supported in IE\n        //https://msdn.microsoft.com/en-us/library/ms536744(v=VS.85).aspx\n        window.clipboardData.setData('text', text);\n        success = true;\n      } catch (err) {\n        debug && console.error('unable to copy using clipboardData: ', err);\n\n        if (options.canUsePrompt) {\n          debug && console.error('falling back to prompt');\n          message = format('message' in options ? options.message : defaultMessage);\n          window.prompt(message, text);\n        }\n      }\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == 'function') {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;","map":null,"metadata":{},"sourceType":"script"}