{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"S:\\\\github repo\\\\bidcontent_v1\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"S:\\\\github repo\\\\bidcontent_v1\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar termux = require('./lib/termux.js');\n\nvar linux = require('./lib/linux.js');\n\nvar macos = require('./lib/macos.js');\n\nvar windows = require('./lib/windows.js');\n\nvar platformLib = function () {\n  switch (process.platform) {\n    case 'darwin':\n      return macos;\n\n    case 'win32':\n      return windows;\n\n    case 'android':\n      if (process.env.PREFIX !== '/data/data/com.termux/files/usr') {\n        throw new Error('You need to install Termux for this module to work on Android: https://termux.com');\n      }\n\n      return termux;\n\n    default:\n      return linux;\n  }\n}();\n\nexports.write =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(text) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof text !== 'string')) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new TypeError(\"Expected a string, got \".concat(typeof text));\n\n          case 2:\n            _context.next = 4;\n            return platformLib.copy({\n              input: text\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.read =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee2() {\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", platformLib.paste({\n            stripEof: false\n          }));\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n}));\n\nexports.writeSync = function (text) {\n  if (typeof text !== 'string') {\n    throw new TypeError(\"Expected a string, got \".concat(typeof text));\n  }\n\n  platformLib.copySync({\n    input: text\n  });\n};\n\nexports.readSync = function () {\n  return platformLib.pasteSync({\n    stripEof: false\n  }).stdout;\n};","map":null,"metadata":{},"sourceType":"script"}