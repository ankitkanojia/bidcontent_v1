{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"S:\\\\github repo\\\\bidcontent_v1\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"S:\\\\github repo\\\\bidcontent_v1\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar path = require('path');\n\nvar execa = require('execa');\n\nvar xsel = 'xsel';\nvar xselFallback = path.join(__dirname, '../fallbacks/linux/xsel');\nvar copyArguments = ['--clipboard', '--input'];\nvar pasteArguments = ['--clipboard', '--output'];\n\nvar makeError = function makeError(xselError, fallbackError) {\n  var error;\n\n  if (xselError.code === 'ENOENT') {\n    error = new Error('Couldn\\'t find the `xsel` binary and fallback didn\\'t work. On Debian/Ubuntu you can install xsel with: sudo apt install xsel');\n  } else {\n    error = new Error('Both xsel and fallback failed');\n    error.xselError = xselError;\n  }\n\n  error.fallbackError = fallbackError;\n  return error;\n};\n\nvar xselWithFallback =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(argumentList, options) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return execa.stdout(xsel, argumentList, options);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            _context.prev = 8;\n            _context.next = 11;\n            return execa.stdout(xselFallback, argumentList, options);\n\n          case 11:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n            _context.prev = 14;\n            _context.t1 = _context[\"catch\"](8);\n            throw makeError(_context.t0, _context.t1);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 6], [8, 14]]);\n  }));\n\n  return function xselWithFallback(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar xselWithFallbackSync = function xselWithFallbackSync(argumentList, options) {\n  try {\n    return execa.sync(xsel, argumentList, options);\n  } catch (xselError) {\n    try {\n      return execa.sync(xselFallback, argumentList, options);\n    } catch (fallbackError) {\n      throw makeError(xselError, fallbackError);\n    }\n  }\n};\n\nmodule.exports = {\n  copy: function () {\n    var _copy = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(options) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return xselWithFallback(copyArguments, options);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function copy(_x3) {\n      return _copy.apply(this, arguments);\n    }\n\n    return copy;\n  }(),\n  copySync: function copySync(options) {\n    xselWithFallbackSync(copyArguments, options);\n  },\n  paste: function paste(options) {\n    return xselWithFallback(pasteArguments, options);\n  },\n  pasteSync: function pasteSync(options) {\n    return xselWithFallbackSync(pasteArguments, options);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}